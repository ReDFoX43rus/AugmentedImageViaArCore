material {
    name : "Augmented Video Material",
    parameters : [
        {
            // The texture displaying the frames of the video.
            type : samplerExternal,
            name : videoTexture
        },
        {
            type : float,
            name : maxWidth
        },
        {
            type : float,
            name : alpha
        },
        {
            type : float,
            name : radius
        },
        {
            type : float,
            name : vertexScale
        }
    ],
    requires : [ uv0 ],
    shadingModel : unlit,
    blending : transparent,
    vertexDomain : object
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        vec4 pos = getPosition();

        float radius = materialParams.radius;
        pos.y = sqrt(sq(radius) - sq(pos.x)) - radius;

        pos.xyz *= materialParams.vertexScale;

        material.worldPosition = getWorldFromModelMatrix() * pos;
    }
}

fragment {
    void material(inout MaterialInputs material) {
        prepareMaterial(material);

        float2 uv = getUV0();
        if (!gl_FrontFacing) {
          uv.x = 1.0 - uv.x;
        }

        vec4 color = texture(materialParams_videoTexture, uv).rgba;
        material.baseColor.rgb = inverseTonemapSRGB(color.rgb);
        material.baseColor.rgba *= materialParams.alpha;

        if(abs(0.5 - uv.x) > materialParams.maxWidth) {
            material.baseColor.rgba *= 0.0;
        }
    }
}